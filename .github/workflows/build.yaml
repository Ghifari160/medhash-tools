name: Build Go binary
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  build-linux-386:
    runs-on: ubuntu-22.04
    env:
      ARCHID: linux_386
      GOOS: linux
      GOARCH: 386
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version-file: "go.mod"
    - uses: s3-actions/s3cmd@v1.5.0
      with:
        provider: ${{vars.S3_PROVIDER}}
        region: ${{vars.S3_REGION}}
        access_key: ${{secrets.S3_ACCESS_KEY}}
        secret_key: ${{secrets.S3_SECRET_KEY}}
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Build binary
      run: go build -trimpath -ldflags="-s -w" -o out/bin/medhash .
    - run: cp LICENSE out/
    - name: Create archive
      run: |
        cd out && \
        tar -zcvf "../medhash-$ARCHID.tar.gz" . && \
        cd ..
    - uses: actions/upload-artifact@v3
      with:
        name: medhash-${{env.ARCHID}}
        path: medhash-${{env.ARCHID}}.tar.gz
    - name: Upload archive to S3
      env:
        OUTPUT: ${{vars.S3_BUCKET}}/${{env.RELEASE_VERSION}}/
      run: s3cmd put "medhash-$ARCHID.tar.gz" -P "$OUTPUT"

  build-linux-amd64:
    runs-on: ubuntu-22.04
    env:
      ARCHID: linux_amd64
      GOOS: linux
      GOARCH: amd64
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version-file: "go.mod"
    - uses: s3-actions/s3cmd@v1.5.0
      with:
        provider: ${{vars.S3_PROVIDER}}
        region: ${{vars.S3_REGION}}
        access_key: ${{secrets.S3_ACCESS_KEY}}
        secret_key: ${{secrets.S3_SECRET_KEY}}
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Build binary
      run: go build -trimpath -ldflags="-s -w" -o out/bin/medhash .
    - run: cp LICENSE out/
    - name: Create archive
      run: |
        cd out && \
        tar -zcvf "../medhash-$ARCHID.tar.gz" . && \
        cd ..
    - uses: actions/upload-artifact@v3
      with:
        name: medhash-${{env.ARCHID}}
        path: medhash-${{env.ARCHID}}.tar.gz
    - name: Upload archive to S3
      env:
        OUTPUT: ${{vars.S3_BUCKET}}/${{env.RELEASE_VERSION}}/
      run: s3cmd put "medhash-$ARCHID.tar.gz" -P "$OUTPUT"

  build-linux-arm64:
    runs-on: ubuntu-22.04
    env:
      ARCHID: linux_arm64
      GOOS: linux
      GOARCH: arm64
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version-file: "go.mod"
    - uses: s3-actions/s3cmd@v1.5.0
      with:
        provider: ${{vars.S3_PROVIDER}}
        region: ${{vars.S3_REGION}}
        access_key: ${{secrets.S3_ACCESS_KEY}}
        secret_key: ${{secrets.S3_SECRET_KEY}}
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Build binary
      run: go build -trimpath -ldflags="-s -w" -o out/bin/medhash .
    - run: cp LICENSE out/
    - name: Create archive
      run: |
        cd out && \
        tar -zcvf "../medhash-$ARCHID.tar.gz" . && \
        cd ..
    - uses: actions/upload-artifact@v3
      with:
        name: medhash-${{env.ARCHID}}
        path: medhash-${{env.ARCHID}}.tar.gz
    - name: Upload archive to S3
      env:
        OUTPUT: ${{vars.S3_BUCKET}}/${{env.RELEASE_VERSION}}/
      run: s3cmd put "medhash-$ARCHID.tar.gz" -P "$OUTPUT"

  build-windows-x86:
    runs-on: ubuntu-22.04
    env:
      ARCHID: windows_x86
      GOOS: windows
      GOARCH: 386
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version-file: "go.mod"
    - uses: s3-actions/s3cmd@v1.5.0
      with:
        provider: ${{vars.S3_PROVIDER}}
        region: ${{vars.S3_REGION}}
        access_key: ${{secrets.S3_ACCESS_KEY}}
        secret_key: ${{secrets.S3_SECRET_KEY}}
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Build binary
      run: go build -trimpath -ldflags="-s -w" -o out/bin/medhash .
    - run: cp LICENSE out/
    - name: Create archive
      run: |
        cd out && \
        tar -zcvf "../medhash-$ARCHID.tar.gz" . && \
        cd ..
    - uses: actions/upload-artifact@v3
      with:
        name: medhash-${{env.ARCHID}}
        path: medhash-${{env.ARCHID}}.tar.gz
    - name: Upload archive to S3
      env:
        OUTPUT: ${{vars.S3_BUCKET}}/${{env.RELEASE_VERSION}}/
      run: s3cmd put "medhash-$ARCHID.tar.gz" -P "$OUTPUT"

  build-windows-amd64:
    runs-on: ubuntu-22.04
    env:
      ARCHID: windows_amd64
      GOOS: windows
      GOARCH: amd64
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version-file: "go.mod"
    - uses: s3-actions/s3cmd@v1.5.0
      with:
        provider: ${{vars.S3_PROVIDER}}
        region: ${{vars.S3_REGION}}
        access_key: ${{secrets.S3_ACCESS_KEY}}
        secret_key: ${{secrets.S3_SECRET_KEY}}
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Build binary
      run: go build -trimpath -ldflags="-s -w" -o out/bin/medhash .
    - run: cp LICENSE out/
    - name: Create archive
      run: |
        cd out && \
        tar -zcvf "../medhash-$ARCHID.tar.gz" . && \
        cd ..
    - uses: actions/upload-artifact@v3
      with:
        name: medhash-${{env.ARCHID}}
        path: medhash-${{env.ARCHID}}.tar.gz
    - name: Upload archive to S3
      env:
        OUTPUT: ${{vars.S3_BUCKET}}/${{env.RELEASE_VERSION}}/
      run: s3cmd put "medhash-$ARCHID.tar.gz" -P "$OUTPUT"

  build-macos:
    runs-on: ubuntu-22.04
    env:
      ARCHID: macos
      ARCHID_ARM64: macos_arm64
      ARCHID_AMD64: macos_amd64
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version-file: "go.mod"
    - uses: s3-actions/s3cmd@v1.5.0
      with:
        provider: ${{vars.S3_PROVIDER}}
        region: ${{vars.S3_REGION}}
        access_key: ${{secrets.S3_ACCESS_KEY}}
        secret_key: ${{secrets.S3_SECRET_KEY}}
    - name: Setup makefat
      run: go install github.com/randall77/makefat@latest
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Build arm64 binary
      env:
        GOOS: darwin
        GOARCH: arm64
      run: go build -trimpath -ldflags="-s -w" -o out/bin/medhash .
    - run: cp LICENSE out/
    - name: Create arm64 archive
      run: |
        cd out && \
        tar -zcvf "../medhash-$ARCHID_ARM64.tar.gz" . && \
        cd ..
    - name: Upload arm64 archive
      uses: actions/upload-artifact@v3
      with:
        name: medhash-${{env.ARCHID_ARM64}}
        path: medhash-${{env.ARCHID_ARM64}}.tar.gz
    - name: Upload arm64 archive to S3
      env:
        OUTPUT: ${{vars.S3_BUCKET}}/${{env.RELEASE_VERSION}}/
      run: s3cmd put "medhash-$ARCHID_ARM64.tar.gz" -P "$OUTPUT"
    - run: mv out/bin/medhash medhash-arm64

    - name: Build amd64 binary
      env:
        GOOS: darwin
        GOARCH: amd64
      run: go build -trimpath -ldflags="-s -w" -o out/bin/medhash .
    - name: Create amd64 archive
      run: |
        cd out && \
        tar -zcvf "../medhash-$ARCHID_AMD64.tar.gz" . && \
        cd ..
    - name: Upload amd64 archive
      uses: actions/upload-artifact@v3
      with:
        name: medhash-${{env.ARCHID_AMD64}}
        path: medhash-${{env.ARCHID_AMD64}}.tar.gz
    - name: Upload amd64 archive to S3
      env:
        OUTPUT: ${{vars.S3_BUCKET}}/${{env.RELEASE_VERSION}}/
      run: s3cmd put "medhash-$ARCHID_AMD64.tar.gz" -P "$OUTPUT"
    - run: mv out/bin/medhash medhash-amd64

    - name: Build universal binary
      run: makefat out/bin/medhash medhash-amd64 medhash-arm64
    - name: Create universal archive
      run: |
        cd out && \
        tar -zcvf "../medhash-$ARCHID.tar.gz" . && \
        cd ..
    - name: Upload universal archive
      uses: actions/upload-artifact@v3
      with:
        name: medhash-${{env.ARCHID}}
        path: medhash-${{env.ARCHID}}.tar.gz
    - name: Upload universal archive to S3
      env:
        OUTPUT: ${{vars.S3_BUCKET}}/${{env.RELEASE_VERSION}}/
      run: s3cmd put "medhash-$ARCHID.tar.gz" -P "$OUTPUT"
